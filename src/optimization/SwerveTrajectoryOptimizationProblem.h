// Copyright (c) TrajoptLib contributors

#pragma once

#include <vector>

#include "optimization/HolonomicTrajectoryOptimizationProblem.h"
#include "optimization/OptiSys.h"
#include "path/Path.h"
#include "drivetrain/SwerveDrivetrain.h"
#include "solution/SwerveSolution.h"

namespace trajopt {

template <typename Expr, typename Opti> requires OptiSys<Expr, Opti>
class SwerveTrajectoryOptimizationProblem {
 public:

  /**
   * @brief Optimizes the given path using IPOPT. Note this function call
   * may take a long time to complete. It may also fail, and throw a
   * CasadiException.
   *
   * @return a holonomic trajectory
   */
  SwerveSolution Generate();

 private:
  /**
   * @brief the swerve drivetrain
   */
  const SwervePath& path;

  /// State Variables
  std::vector<Expr> x;
  std::vector<Expr> y;
  std::vector<Expr> theta;
  std::vector<Expr> vx;
  std::vector<Expr> vy;
  std::vector<Expr> omega;
  std::vector<Expr> ax;
  std::vector<Expr> ay;
  std::vector<Expr> alpha;

  /// Input Variables
  std::vector<std::vector<Expr>> Fx;
  std::vector<std::vector<Expr>> Fy;

  /// Time Variables
  std::vector<Expr> dt;

  /// Discretization Constants
  const std::vector<size_t>& N;

  Opti opti;

  static std::pair<Expr, Expr> RotateVector(const Expr& x, const Expr& y, const Expr& theta);
  static std::pair<Expr, Expr> RotateConstantVector(double x, double y, const Expr& theta);

  /**
   * @brief Gives an expression for the position of a swerve module relative
   * to the nonrotating robot coordinate system, given the robot's heading.
   * The first row contains the x-coordinate, and the second row
   * contains the y-coordinate.
   *
   * @param theta the instantaneous heading of the robot
   * @param module the swerve module to find the position for
   * @return a 2 x 1 vector of positions where each row is a coordinate
   */
//   static const std::pair<Expr, Expr> SolveModulePosition(const Expr& theta,
//                                                   const SwerveModule& module);

 public:
  static std::pair<Expr, Expr> SolveNetForce(
      const std::vector<Expr>& Fx,
      const std::vector<Expr>& Fy);

  static Expr SolveNetTorque(
      const Expr& theta,
      const std::vector<Expr>& Fx,
      const std::vector<Expr>& Fy,
      const std::vector<SwerveModule>& swerveModules);

  static void ApplyKinematicsConstraints(
      Opti& opti,
      const std::vector<Expr>& x,
      const std::vector<Expr>& y,
      const std::vector<Expr>& theta,
      const std::vector<Expr>& vx,
      const std::vector<Expr>& vy,
      const std::vector<Expr>& omega,
      const std::vector<Expr>& ax,
      const std::vector<Expr>& ay,
      const std::vector<Expr>& alpha,
      const std::vector<Expr>& dt,
      const std::vector<size_t> N);

  /**
   * @brief Applies the drivetrain-specific constraints to the optimizer. These
   * constraints prevent motors from spinning too fast or with too much power.
   * For swerve, this applies constraints that connect the speed and direction
   * of each swerve module wheel to the overall kinematics and dynamics of the
   * system. There are two parts: the velocity of each wheel is connected to the
   * velocity of the robot, and the force generated by each wheel is connected
   * to the acceleration of the robot. For both of these, limits are placed on
   * the speed and torque of each wheel. This allows the optimizer to generate
   * an efficient, smooth path that the robot can follow.
   *
   * @param opti the current optimizer upon which constraints will be applied
   * @param theta (controlIntervalTotal + 1) x 1 column vector of the robot's
   * heading for each sample point
   * @param vx (controlIntervalTotal + 1) x 1 column vector of the x-coordinate
   * of the robot's velocity for each sample point
   * @param vy (controlIntervalTotal + 1) x 1 column vector of the y-coordinate
   * of the robot's velocity for each sample point
   * @param omega (controlIntervalTotal + 1) x 1 column vector of the robot's
   * angular velocity for each sample point
   * @param ax controlIntervalTotal x 1 column vector of the x-coordinate of the
   * robot's acceleration for each sample point
   * @param ay controlIntervalTotal x 1 column vector of the y-coordinate of the
   * robot's acceleration for each sample point
   * @param alpha controlIntervalTotal x 1 column vector of the robot's angular
   * velocity for each sample point
   * @param swerveDrivetrain the swerve drivetrain
   */
  static void ApplyDynamicsConstraints(
      Opti& opti,
      const Expr& ax,
      const Expr& ay,
      const Expr& alpha,
      const Expr& Fx_net,
      const Expr& Fy_net,
      const Expr& tau_net,
      double mass,
      double moi);

  static void ApplyPowerConstraints(
      Opti& opti,
      const Expr& theta,
      const Expr& vx,
      const Expr& vy,
      const Expr& omega,
      const std::vector<Expr>& Fx,
      const std::vector<Expr>& Fy,
      const SwerveDrivetrain& swerveDrivetrain);

  static SwerveSolution ConstructSwerveSolution(
      const Opti& opti,
      const std::vector<Expr>& x,
      const std::vector<Expr>& y,
      const std::vector<Expr>& theta,
      const std::vector<Expr>& vx,
      const std::vector<Expr>& vy,
      const std::vector<Expr>& omega,
      const std::vector<Expr>& ax,
      const std::vector<Expr>& ay,
      const std::vector<Expr>& alpha,
      const std::vector<std::vector<Expr>>& Fx,
      const std::vector<std::vector<Expr>>& Fy,
      const std::vector<Expr>& dt,
      const std::vector<size_t>& N);

  /**
   * @brief Construct a new CasADi Swerve Trajectory Optimization Problem
   * with a swerve drivetrain and holonomic path.
   *
   * @param swerveDrivetrain the swerve drivetrain
   * @param holonomicPath the holonomic path
   */
  explicit SwerveTrajectoryOptimizationProblem(
        const SwervePath& path,
        const std::vector<size_t>& N,
        const Solution& initialGuess);

#ifdef DEBUG_OUTPUT
  void PrintSolution() const;
#endif
};
}  // namespace trajopt

#include "optimization/SwerveTrajectoryOptimizationProblem.inc"
