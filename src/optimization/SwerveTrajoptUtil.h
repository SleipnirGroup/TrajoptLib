// Copyright (c) TrajoptLib contributors

#pragma once

#include <utility>
#include <vector>

#include "optimization/TrajoptUtil.h"
#include "trajopt/drivetrain/SwerveDrivetrain.h"
#include "trajopt/solution/SwerveSolution.h"

namespace trajopt {

template <typename Expr>
  requires ExprSys<Expr>
std::pair<Expr, Expr> SolveNetForce(const std::vector<Expr>& Fx,
                                    const std::vector<Expr>& Fy) {
  Expr Fx_net = 0;
  Expr Fy_net = 0;

  for (auto& _Fx : Fx) {
    Fx_net += _Fx;
  }
  for (auto& _Fy : Fy) {
    Fy_net += _Fy;
  }

  return {Fx_net, Fy_net};
}

template <typename Expr>
  requires ExprSys<Expr>
Expr SolveNetTorque(const Expr& theta, const std::vector<Expr>& Fx,
                    const std::vector<Expr>& Fy,
                    const std::vector<SwerveModule>& swerveModules) {
  Expr tau_net = 0;

  for (size_t moduleIdx = 0; moduleIdx < swerveModules.size(); ++moduleIdx) {
    auto& swerveModule = swerveModules.at(moduleIdx);
    auto [x_m, y_m] =
        RotateConstantVector(swerveModule.x, swerveModule.y, theta);
    auto& Fx_m = Fx.at(moduleIdx);
    auto& Fy_m = Fy.at(moduleIdx);
    tau_net += x_m * Fy_m - y_m * Fx_m;
  }

  return tau_net;
}

template <typename Expr, typename Opti>
  requires OptiSys<Expr, Opti>
void ApplyKinematicsConstraints(
    Opti& opti, const std::vector<Expr>& x, const std::vector<Expr>& y,
    const std::vector<Expr>& theta, const std::vector<Expr>& vx,
    const std::vector<Expr>& vy, const std::vector<Expr>& omega,
    const std::vector<Expr>& ax, const std::vector<Expr>& ay,
    const std::vector<Expr>& alpha, const std::vector<Expr>& dt,
    const std::vector<size_t>& N) {
  size_t wptCnt = N.size() + 1;

  for (size_t wptIdx = 1; wptIdx < wptCnt; ++wptIdx) {
    size_t N_sgmt = N.at(wptIdx - 1);
    auto dt_sgmt = dt.at(wptIdx - 1);
    for (size_t sampIdx = 0; sampIdx < N_sgmt; ++sampIdx) {
      size_t idx = GetIdx(N, wptIdx, sampIdx);
      auto x_n = x.at(idx);
      auto x_n_1 = x.at(idx - 1);
      auto y_n = y.at(idx);
      auto y_n_1 = y.at(idx - 1);
      auto theta_n = theta.at(idx);
      auto theta_n_1 = theta.at(idx - 1);
      auto vx_n = vx.at(idx);
      auto vx_n_1 = vx.at(idx - 1);
      auto vy_n = vy.at(idx);
      auto vy_n_1 = vy.at(idx - 1);
      auto omega_n = omega.at(idx);
      auto omega_n_1 = omega.at(idx - 1);
      auto ax_n = ax.at(idx);
      auto ay_n = ay.at(idx);
      auto alpha_n = alpha.at(idx);
      opti.SubjectTo(x_n_1 + vx_n * dt_sgmt == x_n);
      opti.SubjectTo(y_n_1 + vy_n * dt_sgmt == y_n);
      opti.SubjectTo(theta_n_1 + omega_n * dt_sgmt == theta_n);
      opti.SubjectTo(vx_n_1 + ax_n * dt_sgmt == vx_n);
      opti.SubjectTo(vy_n_1 + ay_n * dt_sgmt == vy_n);
      opti.SubjectTo(omega_n_1 + alpha_n * dt_sgmt == omega_n);
    }
  }
}

/**
 * Applies the drivetrain-specific constraints to the optimizer. These
 * constraints prevent motors from spinning too fast or with too much power.
 * For swerve, this applies constraints that connect the speed and direction
 * of each swerve module wheel to the overall kinematics and dynamics of the
 * system. There are two parts: the velocity of each wheel is connected to the
 * velocity of the robot, and the force generated by each wheel is connected
 * to the acceleration of the robot. For both of these, limits are placed on
 * the speed and torque of each wheel. This allows the optimizer to generate
 * an efficient, smooth path that the robot can follow.
 *
 * @param opti the current optimizer upon which constraints will be applied
 * @param theta (controlIntervalTotal + 1) x 1 column vector of the robot's
 * heading for each sample point
 * @param vx (controlIntervalTotal + 1) x 1 column vector of the x-coordinate
 * of the robot's velocity for each sample point
 * @param vy (controlIntervalTotal + 1) x 1 column vector of the y-coordinate
 * of the robot's velocity for each sample point
 * @param omega (controlIntervalTotal + 1) x 1 column vector of the robot's
 * angular velocity for each sample point
 * @param ax controlIntervalTotal x 1 column vector of the x-coordinate of the
 * robot's acceleration for each sample point
 * @param ay controlIntervalTotal x 1 column vector of the y-coordinate of the
 * robot's acceleration for each sample point
 * @param alpha controlIntervalTotal x 1 column vector of the robot's angular
 * velocity for each sample point
 * @param swerveDrivetrain the swerve drivetrain
 */
template <typename Expr, typename Opti>
  requires OptiSys<Expr, Opti>
void ApplyDynamicsConstraints(Opti& opti, const Expr& ax, const Expr& ay,
                              const Expr& alpha, const Expr& Fx_net,
                              const Expr& Fy_net, const Expr& tau_net,
                              double mass, double moi) {
  opti.SubjectTo(Fx_net == mass * ax);
  opti.SubjectTo(Fy_net == mass * ay);
  opti.SubjectTo(tau_net == moi * alpha);
}

template <typename Expr, typename Opti>
  requires OptiSys<Expr, Opti>
void ApplyPowerConstraints(Opti& opti, const Expr& theta, const Expr& vx,
                           const Expr& vy, const Expr& omega,
                           const std::vector<Expr>& Fx,
                           const std::vector<Expr>& Fy,
                           const SwerveDrivetrain& swerveDrivetrain) {
  auto [vx_prime, vy_prime] = RotateVector(vx, vy, -theta);

  size_t moduleCount = swerveDrivetrain.modules.size();

  std::vector<Expr> vx_m;
  std::vector<Expr> vy_m;
  vx_m.reserve(moduleCount);
  vy_m.reserve(moduleCount);

  for (size_t moduleIdx = 0; moduleIdx < moduleCount; ++moduleIdx) {
    auto x_m = swerveDrivetrain.modules.at(moduleIdx).x;
    auto y_m = swerveDrivetrain.modules.at(moduleIdx).y;
    vx_m.emplace_back(vx_prime - y_m * omega);
    vy_m.emplace_back(vy_prime + x_m * omega);
  }

  for (size_t moduleIdx = 0; moduleIdx < moduleCount; ++moduleIdx) {
    auto& _module = swerveDrivetrain.modules.at(moduleIdx);
    double maxWheelVelocity =
        _module.wheelRadius * _module.wheelMaxAngularVelocity;
    double maxForce = _module.wheelMaxTorque / _module.wheelRadius;
    auto _vx_m = vx_m.at(moduleIdx);
    auto _vy_m = vy_m.at(moduleIdx);
    auto Fx_m = Fx.at(moduleIdx);
    auto Fy_m = Fy.at(moduleIdx);
    opti.SubjectTo(_vx_m * _vx_m + _vy_m * _vy_m <=
                   maxWheelVelocity * maxWheelVelocity);

    opti.SubjectTo(Fx_m * Fx_m + Fy_m * Fy_m <= maxForce * maxForce);
  }
}

template <typename Expr, typename Opti>
  requires OptiSys<Expr, Opti>
SwerveSolution ConstructSwerveSolution(
    const Opti& opti, const std::vector<Expr>& x, const std::vector<Expr>& y,
    const std::vector<Expr>& theta, const std::vector<Expr>& vx,
    const std::vector<Expr>& vy, const std::vector<Expr>& omega,
    const std::vector<Expr>& ax, const std::vector<Expr>& ay,
    const std::vector<Expr>& alpha, const std::vector<std::vector<Expr>>& Fx,
    const std::vector<std::vector<Expr>>& Fy, const std::vector<Expr>& dt,
    const std::vector<size_t>& N) {
  std::vector<double> dtPerSamp;
  for (size_t sgmtIdx = 0; sgmtIdx < N.size(); ++sgmtIdx) {
    size_t N_sgmt = N.at(sgmtIdx);
    Expr dt_sgmt = dt.at(sgmtIdx);
    double dt_val = opti.SolutionValue(dt_sgmt);
    for (size_t i = 0; i < N_sgmt; ++i) {
      dtPerSamp.push_back(dt_val);
    }
  }
  return SwerveSolution{
      {{dtPerSamp, RowSolutionValue(opti, x), RowSolutionValue(opti, y),
        RowSolutionValue(opti, theta)},
       RowSolutionValue(opti, vx),
       RowSolutionValue(opti, vy),
       RowSolutionValue(opti, omega),
       RowSolutionValue(opti, ax),
       RowSolutionValue(opti, ay),
       RowSolutionValue(opti, alpha)},
      MatrixSolutionValue(opti, Fx),
      MatrixSolutionValue(opti, Fy)};
}

}  // namespace trajopt
