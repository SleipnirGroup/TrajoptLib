name: Build

on: [pull_request, push]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build-cpp:
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact-name: Native - Windows (CasADi)
            cmake-config-env-vars:
            cmake-flags: "-G \"MinGW Makefiles\" -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++"
            optimizer: casadi
            os: windows-2022
          - artifact-name: Native - macOS x86_64 (CasADi)
            cmake-config-env-vars: CFLAGS="$CFLAGS -arch x86_64" CXXFLAGS="$CXXFLAGS -arch x86_64"
            cmake-flags: "-DCMAKE_APPLE_SILICON_PROCESSOR=x86_64"
            optimizer: casadi
            os: macOS-12
          - artifact-name: Native - macOS arm64 (CasADi)
            cmake-config-env-vars: CFLAGS="$CFLAGS -arch arm64" CXXFLAGS="$CXXFLAGS -arch arm64"
            cmake-flags: "-DCMAKE_APPLE_SILICON_PROCESSOR=arm64"
            optimizer: casadi
            os: macOS-12
          - artifact-name: Native - Linux (CasADi)
            cmake-config-env-vars:
            cmake-flags:
            optimizer: casadi
            os: ubuntu-latest
          - artifact-name: Native - Windows (Sleipnir)
            cmake-config-env-vars:
            cmake-flags:
            optimizer: sleipnir
            os: windows-2022
          - artifact-name: Native - macOS universal (Sleipnir)
            cmake-config-env-vars: CFLAGS="$CFLAGS -arch x86_64 -arch arm64" CXXFLAGS="$CXXFLAGS -arch x86_64 -arch arm64"
            cmake-flags:
            optimizer: sleipnir
            os: macOS-12
          - artifact-name: Native - Linux (Sleipnir)
            cmake-config-env-vars:
            cmake-flags:
            optimizer: sleipnir
            os: ubuntu-latest

    name: "${{ matrix.artifact-name }}"
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up MinGW
        if: matrix.os == 'windows-2022' && matrix.optimizer == 'casadi'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: configure
        run: ${{ matrix.cmake-config-env-vars }} cmake -B build -S . ${{ matrix.cmake-flags }} -DOPTIMIZER_BACKEND=${{ matrix.optimizer }}

      - name: build
        run: cmake --build build --config RelWithDebInfo --parallel $(nproc)

      - name: install
        run: cmake --install build --config RelWithDebInfo --prefix pkg

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ matrix.artifact-name }}
          path: pkg

  build-wasm:
    name: "Wasm"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Setup emscripten
        uses: numworks/setup-emscripten@latest

      - name: configure
        run: emcmake cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DOPTIMIZER_BACKEND=sleipnir

      - name: build
        run: cmake --build build --config Release --parallel $(nproc)

      - name: install
        run: cmake --install build --config Release --prefix pkg

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: Wasm
          path: pkg

#  build-java:
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - artifact-name: Java - Linux x86_64
#            containsLinux-x86_64: true
#            containsmacOS-x86_64: false
#            containsWindows-x86_64: false
#            platform_id: linux64
#
#          - artifact-name: Java - macOS x86_64
#            containsLinux-x86_64: false
#            containsmacOS-x86_64: true
#            containsWindows-x86_64: false
#            platform_id: mac64
#
#          - artifact-name: Java - Windows x86_64
#            containsLinux-x86_64: false
#            containsmacOS-x86_64: false
#            containsWindows-x86_64: true
#            platform_id: windows64
#
#          - artifact-name: Java - Universal
#            containsLinux-x86_64: true
#            containsmacOS-x86_64: true
#            containsWindows-x86_64: true
#            platform_id: ""
#
#    needs: build-cpp
#    name: "${{ matrix.artifact-name }}"
#
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v1
#        with:
#          java-version: 11
#
#      - uses: actions/download-artifact@v3
#        if: ${{ matrix.containsLinux-x86_64 }}
#        with:
#          name: HelixTrajectory_Linux-x86_64
#          path: native_builds/HelixTrajectory_Linux-x86_64
#
#      - uses: actions/download-artifact@v3
#        if: ${{ matrix.containsmacOS-x86_64 }}
#        with:
#          name: HelixTrajectory_macOS-x86_64
#          path: native_builds/HelixTrajectory_macOS-x86_64
#
#      - uses: actions/download-artifact@v3
#        if: ${{ matrix.containsWindows-x86_64 }}
#        with:
#          name: HelixTrajectory_Windows-x86_64
#          path: native_builds/HelixTrajectory_Windows-x86_64
#
#      - run: cd native_builds;ls
#
#      - if: ${{ matrix.containsLinux-x86_64 }}
#        run: mkdir -p helixtrajectoryj/src/main/resources/linux;cp -R native_builds/HelixTrajectory_Linux-x86_64/lib helixtrajectoryj/src/main/resources/linux;cd helixtrajectoryj/src/main/resources/linux;mv lib x86_64;cd x86_64;HASH=$(md5sum libhelixtrajectory.so | cut -c -32);echo $HASH >> helixtrajectory.hash;mv libhelixtrajectory.so libhelixtrajectory.so.$HASH
#
#      - if: ${{ matrix.containsmacOS-x86_64 }}
#        run: mkdir -p helixtrajectoryj/src/main/resources/osx;cp -R native_builds/HelixTrajectory_macOS-x86_64/lib helixtrajectoryj/src/main/resources/osx;cd helixtrajectoryj/src/main/resources/osx;mv lib x86_64;cd x86_64;HASH=$(md5sum libhelixtrajectory.dylib | cut -c -32);echo $HASH >> helixtrajectory.hash;mv libhelixtrajectory.dylib libhelixtrajectory.dylib.$HASH
#
#      - if: ${{ matrix.containsWindows-x86_64 }}
#        run: mkdir -p helixtrajectoryj/src/main/resources/windows;cp -R native_builds/HelixTrajectory_Windows-x86_64/bin helixtrajectoryj/src/main/resources/windows;cd helixtrajectoryj/src/main/resources/windows;mv bin x86_64;cd x86_64;HASH=$(md5sum libhelixtrajectory.dll | cut -c -32);echo $HASH >> helixtrajectory.hash;mv libhelixtrajectory.dll libhelixtrajectory.dll.$HASH
#
#      - name: Build Java
#        run: ./gradlew jar
#      - name: Publish package
#        run: ./gradlew publishMavenPublicationToGithubRepository -Pplatform_id=${{ matrix.platform_id }} -PgithubUsername=$GITHUB_ACTOR -PgithubPassword=${{ secrets.GITHUB_TOKEN }}
