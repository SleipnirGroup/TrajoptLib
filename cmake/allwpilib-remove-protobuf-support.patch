diff --git a/CMakeLists.txt b/CMakeLists.txt
index 79df35974..2573a5059 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -213,8 +213,6 @@ endif()
 
 find_package(LIBSSH 0.7.1)
 
-find_package(Protobuf REQUIRED)
-
 set(APRILTAG_DEP_REPLACE "find_dependency(apriltag)")
 set(CAMERASERVER_DEP_REPLACE_IMPL "find_dependency(cameraserver)")
 set(CSCORE_DEP_REPLACE_IMPL "find_dependency(cscore)")
diff --git a/wpimath/CMakeLists.txt b/wpimath/CMakeLists.txt
index 3c9c7dcc9..1032e2f78 100644
--- a/wpimath/CMakeLists.txt
+++ b/wpimath/CMakeLists.txt
@@ -5,18 +5,6 @@ include(CompileWarnings)
 include(AddTest)
 include(DownloadAndCheck)
 
-# workaround for makefiles - for some reason parent directories aren't created.
-file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/protobuf")
-file(GLOB wpimath_proto_src src/main/proto/*.proto)
-protobuf_generate_cpp(
-    WPIMATH_PROTO_SRCS
-    WPIMATH_PROTO_HDRS
-    PROTOC_OUT_DIR
-    "${CMAKE_CURRENT_BINARY_DIR}/protobuf"
-    PROTOS
-    ${wpimath_proto_src}
-)
-
 file(
     GLOB wpimath_jni_src
     src/main/native/cpp/jni/WPIMathJNI_DARE.cpp
@@ -196,7 +184,6 @@ target_include_directories(
     wpimath
     PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/main/native/include>
-        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/protobuf>
         $<INSTALL_INTERFACE:${include_dest}/wpimath>
 )
 
diff --git a/wpimath/src/main/native/cpp/geometry/Pose3d.cpp b/wpimath/src/main/native/cpp/geometry/Pose3d.cpp
index bd7ab8681..be2906259 100644
--- a/wpimath/src/main/native/cpp/geometry/Pose3d.cpp
+++ b/wpimath/src/main/native/cpp/geometry/Pose3d.cpp
@@ -9,8 +9,6 @@
 #include <Eigen/Core>
 #include <wpi/json.h>
 
-#include "geometry3d.pb.h"
-
 using namespace frc;
 
 namespace {
diff --git a/wpimath/src/main/native/cpp/geometry/Rotation2d.cpp b/wpimath/src/main/native/cpp/geometry/Rotation2d.cpp
index 69193028f..921e1f81a 100644
--- a/wpimath/src/main/native/cpp/geometry/Rotation2d.cpp
+++ b/wpimath/src/main/native/cpp/geometry/Rotation2d.cpp
@@ -8,7 +8,6 @@
 
 #include <wpi/json.h>
 
-#include "geometry2d.pb.h"
 #include "units/math.h"
 
 using namespace frc;
diff --git a/wpimath/src/main/native/cpp/geometry/Rotation3d.cpp b/wpimath/src/main/native/cpp/geometry/Rotation3d.cpp
index 072d023cb..b4dce35a5 100644
--- a/wpimath/src/main/native/cpp/geometry/Rotation3d.cpp
+++ b/wpimath/src/main/native/cpp/geometry/Rotation3d.cpp
@@ -13,7 +13,6 @@
 #include <wpi/json.h>
 
 #include "frc/fmt/Eigen.h"
-#include "geometry3d.pb.h"
 #include "units/math.h"
 #include "wpimath/MathShared.h"
 
diff --git a/wpimath/src/main/native/cpp/geometry/Transform2d.cpp b/wpimath/src/main/native/cpp/geometry/Transform2d.cpp
index 157359bfb..25b05907e 100644
--- a/wpimath/src/main/native/cpp/geometry/Transform2d.cpp
+++ b/wpimath/src/main/native/cpp/geometry/Transform2d.cpp
@@ -5,7 +5,6 @@
 #include "frc/geometry/Transform2d.h"
 
 #include "frc/geometry/Pose2d.h"
-#include "geometry2d.pb.h"
 
 using namespace frc;
 
diff --git a/wpimath/src/main/native/cpp/geometry/Translation2d.cpp b/wpimath/src/main/native/cpp/geometry/Translation2d.cpp
index 90162018e..842f6c03c 100644
--- a/wpimath/src/main/native/cpp/geometry/Translation2d.cpp
+++ b/wpimath/src/main/native/cpp/geometry/Translation2d.cpp
@@ -6,7 +6,6 @@
 
 #include <wpi/json.h>
 
-#include "geometry2d.pb.h"
 #include "units/math.h"
 
 using namespace frc;
diff --git a/wpimath/src/main/native/cpp/geometry/Translation3d.cpp b/wpimath/src/main/native/cpp/geometry/Translation3d.cpp
index c3b8cb4b7..69757f308 100644
--- a/wpimath/src/main/native/cpp/geometry/Translation3d.cpp
+++ b/wpimath/src/main/native/cpp/geometry/Translation3d.cpp
@@ -6,7 +6,6 @@
 
 #include <wpi/json.h>
 
-#include "geometry3d.pb.h"
 #include "units/length.h"
 #include "units/math.h"
 
diff --git a/wpiutil/CMakeLists.txt b/wpiutil/CMakeLists.txt
index b4482ff04..aecf8f2af 100644
--- a/wpiutil/CMakeLists.txt
+++ b/wpiutil/CMakeLists.txt
@@ -157,7 +157,7 @@ if(MSVC)
     target_compile_definitions(wpiutil PRIVATE -D_CRT_SECURE_NO_WARNINGS)
 endif()
 wpilib_target_warnings(wpiutil)
-target_link_libraries(wpiutil protobuf::libprotobuf Threads::Threads ${CMAKE_DL_LIBS})
+target_link_libraries(wpiutil Threads::Threads ${CMAKE_DL_LIBS})
 
 if(ATOMIC)
     target_link_libraries(wpiutil ${ATOMIC})
diff --git a/wpiutil/src/main/native/include/wpi/DataLog.h b/wpiutil/src/main/native/include/wpi/DataLog.h
index 6187662c0..2057ba81e 100644
--- a/wpiutil/src/main/native/include/wpi/DataLog.h
+++ b/wpiutil/src/main/native/include/wpi/DataLog.h
@@ -26,7 +26,6 @@
 #include "wpi/StringMap.h"
 #include "wpi/condition_variable.h"
 #include "wpi/mutex.h"
-#include "wpi/protobuf/Protobuf.h"
 #include "wpi/struct/Struct.h"
 #include "wpi/timestamp.h"
 #endif  // __cplusplus
@@ -239,26 +238,6 @@ class DataLog final {
         timestamp);
   }
 
-  /**
-   * Registers a protobuf schema. Duplicate calls to this function with the same
-   * name are silently ignored.
-   *
-   * @tparam T protobuf serializable type
-   * @param msg protobuf message
-   * @param timestamp Time stamp (0 to indicate now)
-   */
-  template <ProtobufSerializable T>
-  void AddProtobufSchema(ProtobufMessage<T>& msg, int64_t timestamp = 0) {
-    if (timestamp == 0) {
-      timestamp = Now();
-    }
-    msg.ForEachProtobufDescriptor(
-        [this](auto typeString) { return HasSchema(typeString); },
-        [this, timestamp](auto typeString, auto schema) {
-          AddSchema(typeString, "proto:FileDescriptorProto", schema, timestamp);
-        });
-  }
-
   /**
    * Registers a struct schema. Duplicate calls to this function with the same
    * name are silently ignored.
@@ -1062,44 +1041,6 @@ class StructArrayLogEntry : public DataLogEntry {
   [[no_unique_address]] std::tuple<I...> m_info;
 };
 
-/**
- * Log protobuf serializable objects.
- */
-template <ProtobufSerializable T>
-class ProtobufLogEntry : public DataLogEntry {
-  using P = Protobuf<T>;
-
- public:
-  ProtobufLogEntry() = default;
-  ProtobufLogEntry(DataLog& log, std::string_view name, int64_t timestamp = 0)
-      : ProtobufLogEntry{log, name, {}, timestamp} {}
-  ProtobufLogEntry(DataLog& log, std::string_view name,
-                   std::string_view metadata, int64_t timestamp = 0) {
-    m_log = &log;
-    log.AddProtobufSchema<T>(m_msg, timestamp);
-    m_entry = log.Start(name, m_msg.GetTypeString(), metadata, timestamp);
-  }
-
-  /**
-   * Appends a record to the log.
-   *
-   * @param data Data to record
-   * @param timestamp Time stamp (may be 0 to indicate now)
-   */
-  void Append(const T& data, int64_t timestamp = 0) {
-    SmallVector<uint8_t, 128> buf;
-    {
-      std::scoped_lock lock{m_mutex};
-      m_msg.Pack(buf, data);
-    }
-    m_log->AppendRaw(m_entry, buf, timestamp);
-  }
-
- private:
-  wpi::mutex m_mutex;
-  ProtobufMessage<T> m_msg;
-};
-
 }  // namespace wpi::log
 
 extern "C" {
